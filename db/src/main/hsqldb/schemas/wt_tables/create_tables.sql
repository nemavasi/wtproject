--HSQLDB
drop table if exists log_level cascade;
create table log_level
  (
    id             bigint generated by default as identity primary key ,
    sys_name       varchar (30) ,
    name           varchar (100) ,
    warning_level  numeric(1) ,
    is_deleted     char(1) default 'N' not null check(is_deleted = 'Y' or is_deleted = 'N') ,
    display_order  numeric(10) ,
    search_synonim varchar (100)
  ) ;
commit;
comment on table log_level is 'Уровни логгирования' ;
comment on column log_level.warning_level is 'Уровень логов';


drop table if exists SYSTEM_LOG cascade;
commit;
create table SYSTEM_LOG
  (
    id              bigint generated by default as identity primary key ,
    log_date        date, --timestamp with time zone ,
    record_details  varchar (1000) ,
    log_level_id    bigint not null
  ) ;
commit;
comment on table SYSTEM_LOG is 'Журнал логов' ;
comment on column SYSTEM_LOG.log_level_id is 'id уровня логгирования' ;
alter table SYSTEM_LOG add constraint system_log_log_level_FK foreign key ( log_level_id ) references log_level ( id ) ;

/*
drop table if exists system_parameter cascade;
create table if not exists system_parameter
  (
    id        bigint generated by default as identity primary key ,
    sys_name  varchar (30) ,
    name      varchar (100) ,
    value_str varchar (200)
  ) ;
comment on table system_parameter is 'Системные параметры' ;
comment on column system_parameter.name is 'Имя системного  параметра' ;
comment on column system_parameter.value_str is 'Значение системного параметра' ;



drop table if exists organization cascade;
create table organization
  (
    id             bigint generated by default as identity primary key ,
    sys_name       varchar (30) ,
    short_name     varchar (100) ,
    name           varchar (200) ,
    full_name      varchar (500) ,
    address        varchar (200) ,
    phone          varchar (100) ,
    is_deleted     char(1) default 'N' not null check(is_deleted = 'Y' or is_deleted = 'N') ,
    display_order  numeric(10) ,
    search_synonim varchar (100)
  ) ;
comment on table organization is 'Список организаций ';
comment on column organization.name is 'Наименование организации';
comment on column organization.full_name is 'Полное наименование организации' ;
comment on column organization.address is 'Адрес организации' ;
comment on column organization.phone is 'Телефон организации' ;


drop table if exists department cascade;
create table if not exists department
  (
    id                   bigint generated by default as identity primary key ,
    organization_id      bigint not null ,
    sys_name             varchar (30) ,
    name                 varchar (200) ,
    parent_department_id bigint ,
    is_deleted           char(1) default 'N' not null check(is_deleted = 'Y' or is_deleted = 'N') ,
    display_order        numeric(100) ,
    search_synonim       varchar (100)
  ) ;
comment on table department is 'Подразделения организаций' ;
comment on column department.organization_id is 'id организации' ;
comment on column department.sys_name is 'Системное имя подразделения' ;
comment on column department.name is 'Название подразделения' ;
comment on column department.parent_department_id is 'Ссылка на головное подразделение' ;
alter table department add constraint department_department_FK foreign key ( parent_department_id ) references department ( id ) ;
alter table department add constraint department_organization_FK foreign key ( organization_id ) references organization ( id ) ;



drop table if exists users cascade;
create table if not exists users
  (
    id             bigint generated by default as identity primary key ,
    creation_date  timestamp with time zone ,
    info           text ,
    username       varchar (100) ,
    password_hash  varchar (100) ,
    first_name     varchar (100) ,
    middle_name    varchar (100) ,
    second_name    varchar (100) ,
    email          varchar (100) ,
    contact_info   varchar (200) ,
    is_deleted     char(1) default 'N' not null check(is_deleted = 'Y' or is_deleted = 'N') ,
    display_order  varchar (100) ,
    search_synonim varchar (100)
  ) ;
comment on table users is 'Справочник пользователей' ;
comment on column users.creation_date is 'дата создания пользователя' ;
comment on column users.info is 'Общая информация' ;
comment on column users.username is   'логин' ;
comment on column users.password_hash is 'пароль' ;
comment on column users.first_name is 'Имя' ;
comment on column users.middle_name is 'Отчество' ;
comment on column users.second_name is 'Фамилия' ;
comment on column users.contact_info is 'Контактная информация' ;


drop table if exists setting_type cascade;
create table setting_type
  (
    id             bigint generated by default as identity primary key ,
    sys_name       varchar (30) ,
    name           varchar (100) ,
    is_deleted     char(1) default 'N' not null check(is_deleted = 'Y' or is_deleted = 'N') ,
    display_order  numeric(10) ,
    search_synonim varchar (100)
  ) ;


drop table if exists user_setting cascade;
create table user_setting
  (
    id              bigint generated by default as identity primary key ,
    setting_value   varchar (4000) ,
    setting_type_id bigint not null ,
    user_id         bigint not null
  ) ;
alter table user_setting add constraint personal_setting_users_FK foreign key ( user_id ) references users ( id ) ;
alter table user_setting add constraint user_setting_setting_type_FK foreign key ( setting_type_id ) references setting_type ( id ) ;



drop table if exists role cascade;
create table role
  (
    id             bigint generated by default as identity primary key ,
    sys_name       varchar (30) ,
    name           varchar (100) ,
    is_deleted     char(1) default 'N' not null check(is_deleted = 'Y' or is_deleted = 'N') ,
    display_order  numeric(100) ,
    search_synonim varchar (100)
  ) ;
comment on table role is 'Справочник ролей пользователей' ;


drop table if exists access_control_item cascade;
create table access_control_item
  (
    id             bigint generated by default as identity primary key ,
    sys_name       varchar (30) ,
    name           varchar (100) ,
    is_deleted     char(1) default 'N' not null check(is_deleted = 'Y' or is_deleted = 'N') ,
    display_order  numeric(100) ,
    search_synonim varchar (100)
  ) ;
comment on table access_control_item
is
  'Справочник объектов прав' ;

drop table if exists access_for_role cascade;
create table access_for_role
  (
    id                     bigint generated by default as identity primary key ,
    access_control_right   char (1) ,
    role_id                bigint not null ,
    access_control_item_id bigint not null
  ) ;
comment on table access_for_role is 'Соответствие объектов прав ролям' ;
comment on column access_for_role.access_control_right is 'право на запись (W) или на чтение (R)' ;
comment on column access_for_role.role_id is 'id роли' ;
comment on column access_for_role.access_control_item_id is 'id объекта прав' ;
alter table access_for_role add constraint access_for_role_access_control_item_FK foreign key ( access_control_item_id ) references access_control_item ( id ) ;
alter table access_for_role add constraint access_for_role_role_FK foreign key ( role_id ) references role ( id ) ;


drop table if exists user_role_department cascade;
create table if not exists user_role_department
  (
    id            bigint generated by default as identity primary key ,
    user_id       bigint not null ,
    role_id       bigint not null ,
    department_id bigint ,
    start_date    timestamp with time zone ,
    end_date      timestamp with time zone
  ) ;
comment on table user_role_department is 'Назначение  роли и подразделения пользователю' ;
comment on column user_role_department.start_date is 'Дата начала назначения' ;
comment on column user_role_department.end_date is 'Дата окончания действия роли и назначения на подразделение' ;
alter table user_role_department add constraint user_role_organization_department_FK foreign key ( department_id ) references department ( id ) ;
alter table user_role_department add constraint user_role_organization_role_FK foreign key ( role_id ) references role ( id ) ;
alter table user_role_department add constraint user_role_organization_users_FK foreign key ( user_id ) references users ( id ) ;
  
  
  
commit



--start data

insert into access_control_item (
        sys_name, name, is_deleted, display_order, search_synonim
    ) values (
        'all', 'all', 'N', 1, 'all'
    )
    ;


insert into system_parameter (sys_name, name, value_str)
values ('last_db_update', 'Последняя версия апдейта', '0000');
*/
commit
